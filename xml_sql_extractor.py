import xml.etree.ElementTree as ET
from xml.etree.ElementTree import tostring
import xlsxwriter
import os
import glob
import shutil

def generate_xlsx(p_xlsx_path_name,p_snapon_xml_path_file,p_navisite_xml_path_file):
    #l_path = os.path.dirname(os.path.abspath(p_snapon_xml_path_file))
    #l_xml_file_name = os.path.basename(p_snapon_xml_path_file)
    print(p_snapon_xml_path_file)

    # Make a copy of SnapOn XML to Navisite XML
    shutil.copyfile(p_snapon_xml_path_file,p_navisite_xml_path_file)
    process_xml_file(p_navisite_xml_path_file)
    

def ora2pg_output_sql(p_oracle_sql):

    # Write Oracle SQL to Work Area File
    f = open("C:/DB_Scripts/xml_sql_processing/scripts/ora2pg_work_area/oracle_sql_file.sql", "w")
    f.write(p_oracle_sql)
    f.close()

    # Convert Oracle SQL to PG SQL
    # ora2pg -p -t QUERY -i C:\DB_Scripts\xml_sql_processing\scripts\ora2pg_work_area\oracle_sql_file.sql -o xml_sql.sql
    import subprocess
    l_work = ['ora2pg', '-p', '-t', 'QUERY', '-i' ,'C:/DB_Scripts/xml_sql_processing/scripts/ora2pg_work_area/oracle_sql_file.sql', '-o', 'xml_sql.sql']
    subprocess.call(l_work, shell=True)

    # Read Coverted PG sql to variable
    try:
        with open("C:/DB_Scripts/ora2pg_output/xml_sql.sql") as f:
            lines = f.readlines()
            # print("file content")
            # print(lines[-2].strip())
            lines = ''.join(lines).strip()
            lines = lines.replace("""-- Generated by Ora2Pg, the Oracle database Schema converter, version 23.1
-- Copyright 2000-2022 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.0.1.102;SERVICE_NAME=PRISM;port=1521

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON

""","")
            return [0,lines]
    except:
        return [1,p_oracle_sql]

    
def process_xml_file(p_navisite_xml_path_file):
    ID = 1
    # xmldoc = minidom.parse(p_navisite_xml_path_file)
    xmldoc = ET.parse(p_navisite_xml_path_file)
    root = xmldoc.getroot()

    for sql_tag in root.iter('SqlQuery'):
        print("Oracle SQL")
        print(sql_tag.text)
        sql_tag.set("NavisiteID",str(ID))
        ID+=1
        
        # Read ora2pg output.txt file to var
        l_pg_sql = ora2pg_output_sql(sql_tag.text)
        print("PG SQL")
        print( l_pg_sql[1])
        # break

    mydata = ET.tostring(root, encoding='unicode')
    # print(mydata)

    # Write the Generated XML to file
    myfile = open(p_navisite_xml_path_file, "w")
    myfile.write(mydata)

    """
    attr = xmldoc.createAttribute("NavisiteID")
    
    # SQL
    l_sql = ""
     
    # Some data we want to write to the worksheet.
    xlsx_sheet_data = []

    sql_elements = xmldoc.getElementsByTagName("SqlQuery")
    l_sheet_row = []

    for sql in sql_elements:
            sql.setAttribute(attr,str(ID))
            ID+=1
    """
            
"""                
            try:
                print(sql.attributes["sheet"].value)
                l_sheet_row.append(str(sql.attributes["sheet"].value))
            except:
                l_sheet_row.append(str(""))

           
            # "DEVELOPER"
            l_sheet_row.append(str(""))
            
            # "STATUS"
            l_sheet_row.append(str(""))

            # "NOTES"
            l_sheet_row.append(str(""))
            
            # "XML_ORA_SQL"
            # print the NodeValue of every code_element
            l_sheet_row.append(str(sql.childNodes[0].nodeValue))
            
            
            # "XML_PG_SQL"
            l_sheet_row.append(str(""))
            
            xlsx_sheet_data.append(l_sheet_row)
            l_sheet_row=[]
            
    # Attributes sheet="GraphData" maxRows="500" row="2502" column="1"  cell="B14" transpose="true" useDecimal="true">

    print(xlsx_sheet_data)
     
    # XLSX Writer

    workbook = xlsxwriter.Workbook(l_path + "\\" +'xml_sql_refactor_tracker_vb1.xlsx')
    worksheet = workbook.add_worksheet("XML_SQLs")

    worksheet.write(0, 0, "XML_FileName")
    worksheet.write(0, 1, "SHEET")
    worksheet.write(0, 2, "NavisiteID")
    worksheet.write(0, 3, "DEVELOPER")
    worksheet.write(0, 4, "STATUS")
    worksheet.write(0, 5, "PGSQL2XML")
    worksheet.write(0, 6, "NOTES")
    worksheet.write(0, 7, "XML_ORA_SQL")
    worksheet.write(0, 8, "XML_PG_SQL")

    cell_row = 1
    cell_col = 0
    # Iterate over the data and write it out row by row.
    for sheet,row,maxRows,column,cell,transpose,useDecimal,DEVELOPER,STATUS,NOTES,XML_ORA_SQL,XML_PG_SQL in (xlsx_sheet_data):
        worksheet.write(cell_row, cell_col, sheet)
        worksheet.write(cell_row, cell_col + 1, row)
        worksheet.write(cell_row, cell_col + 2, maxRows)
        worksheet.write(cell_row, cell_col + 3, column)
        worksheet.write(cell_row, cell_col + 4, cell)
        worksheet.write(cell_row, cell_col + 5, transpose)
        worksheet.write(cell_row, cell_col + 6, useDecimal)
        worksheet.write(cell_row, cell_col + 7, DEVELOPER)
        worksheet.write(cell_row, cell_col + 8, STATUS)
        worksheet.write(cell_row, cell_col + 9, NOTES)
        worksheet.write(cell_row, cell_col + 10, XML_ORA_SQL.strip())
        worksheet.write(cell_row, cell_col + 11, XML_PG_SQL)

        cell_row += 1
     
    xlsx_sheet_data=[]
    workbook.close()
"""


# Create a DOM object by reading the XML
l_snapon_xml_path_test = "C:\\DB_Scripts\\xml_sql_processing\\data\\nissaneu_prod_sql_xml_files\\"
l_xlsx_path_name = ""

l_snapon_xml_path = "C:\\DB_Scripts\\xml_sql_processing\\data\\niss_aneu_prod_sql_xml_files\\13070427_Data Quality File CZ.xml"
l_navisite_xml_path = "C:\\DB_Scripts\\xml_sql_processing\\data\\nissa_neu_prod_sql_xml_files_navisite_tag\\"

file_name="C:\\DB_Scripts\\xml_sql_processing\\data\\nissaneu_prod_sql_xml_files\\13070427_Data Quality File CZ.xml"
generate_xlsx(p_xlsx_path_name="",p_snapon_xml_path_file=file_name,p_navisite_xml_path_file=l_navisite_xml_path+os.path.basename(file_name))

"""
for file_name in glob.glob(l_snapon_xml_path + "*.xml"):
    print(file_name)
    generate_xlsx(p_xlsx_path_name="",p_snapon_xml_path_file=file_name,p_navisite_xml_path_file=l_navisite_xml_path+os.path.basename(file_name))
    break
"""
